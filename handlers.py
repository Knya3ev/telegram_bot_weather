import settings
from telebot import types
from models import User, UserState
import buttans
import logging

log = logging.getLogger('bot')


class BotHandler:
    def __init__(self, user_id, text):
        self.user_id = user_id
        self.text = text
        self.bt = buttans
        self.settings = settings

    def start_scenario(self, user_id, scenario_name):
        scenario = self.settings.SCENARIO[scenario_name]  # –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
        first_step = scenario['first_step']  # –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Å—Ç–µ–ø —Å—Ü–µ–Ω–∞—Ä–∏—è
        step = scenario['steps'][first_step]
        # bot.send_message(user_id, step['text'])  # –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–µ–ø–∞ –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è
        UserState(user_id=str(user_id), scenario_name=scenario_name, step_name=first_step, context={})
        return {'text': step['text'], 'buttons': types.ReplyKeyboardRemove(selective=False)}

    def continue_scenario(self, text, state, user_id):  # state –¥–∞–Ω–Ω—ã–µ –º–æ–ª–¥–µ–ª–∏
        steps = self.settings.SCENARIO[state.scenario_name]['steps']  # –∏–∑ –º–æ–¥–µ–ª–∏ –ø–æ –∏–º–µ–Ω–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø–æ–ª—É—á–∞—é —Å—Ç–µ–ø–æ–≤
        step = steps[state.step_name]  # –∏–º—è —Å—Ç–µ–ø–∞ –∏–∑ –º–æ–¥–µ–ª–∏
        handler = step['handler']  # –µ—Å–ª–∏ def  –±—É–¥–µ—Ç –≤ –¥—Ä—É–≥–æ–º —Ñ–∞–π–ª—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å gettatr
        if handler(city=text.lower(), context=state.context):  # –≤–æ–∑–≤—Ä–æ—â–∞–µ—Ç TRUE –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥ –µ—Å—Ç—å
            next_step = steps[step['next_step']]
            if next_step['next_step']:  # –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—â–∏–π —Å—Ç–µ–ø
                state.step_name = step['next_step']
                return {'text': step['text'], 'buttons': None}
            else:
                user = User.get(user_id=str(user_id))
                if user is not None:
                    log.debug(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å c id {user_id} –ø–æ–º–µ–Ω—è–ª —Å–≤–æ–π –≥–æ—Ä–æ–¥ –Ω–∞ {state.context["city"]}')
                    user.user_city = state.context['city']
                else:
                    User(user_id=str(user_id), user_city=state.context['city'])
                    log.debug(f'–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {user_id} –≥–æ—Ä–æ–¥ {state.context["city"]}')
                state.delete()
            return {'text': next_step['text'], 'buttons': self.bt.in_keyboard(['–ü–æ–≥–æ–¥–∞ üå§'], 1)}
        else:
            log.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞! User_id:{user_id}, text: {text}')
            return {'text': step['failure_text'], 'buttons': None}

    def run(self,):
        state = UserState.get(user_id=str(self.user_id))
        if state is not None:
            return self.continue_scenario(self.text, state, self.user_id)
        else:
            for intent in self.settings.INTENTS:
                if any(token in self.text.lower() for token in intent['tokens']):
                    if intent['answer']:
                        return {'text': intent['answer'], 'buttons': self.bt.in_keyboard(**intent['buttons'])}
                    else:
                        return self.start_scenario(self.user_id, intent['scenario'])

            return {'text': self.settings.DEFAULT_ANSWER, 'buttons': types.ReplyKeyboardRemove(selective=False)}


def translate_city(city):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫—É  RU > ENG"""
    d = {
        '–∞': 'a', '–∫': 'k', '—Ö': 'h', '–±': 'b', '–ª': 'l', '—Ü': 'c', '–≤': 'v', '–º': 'm', '—á': 'ch',
        '–≥': 'g', '–Ω': 'n', '—à': 'sh', '–¥': 'd', '–æ': 'o', '—â': 'shh', '–µ': 'e', '–ø': 'p', '—ä': '*',
        '—ë': 'jo', '—Ä': 'r', '—ã': 'y', '–∂': 'zh', '—Å': 's', '—å': "'", '–∑': 'z', '—Ç': 't', '—ç': 'je',
        '–∏': 'i', '—É': 'u', '—é': 'ju', '–π': 'j', '—Ñ': 'f', '—è': 'ya', ' ': ' '
    }
    translate = ''
    for char in city.lower():
        translate += d[char] if char in d else ''
    return translate


def add_city(city, context):

    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ """

    with open('cities.txt', 'r', encoding='utf-8') as file_cities:
        set_city = {i.lower().replace('-', ' ') for i in file_cities.read().split(', ') if i != ''}
        if city.lower() in set_city:
            context['city'] = translate_city(city)
        return 1 if city in set_city else 0
